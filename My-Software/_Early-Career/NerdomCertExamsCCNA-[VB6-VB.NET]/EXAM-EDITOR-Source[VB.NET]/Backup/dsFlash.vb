'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsFlash
    Inherits DataSet
    
    Private tableQ1 As Q1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Q1")) Is Nothing) Then
                Me.Tables.Add(New Q1DataTable(ds.Tables("Q1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Q1 As Q1DataTable
        Get
            Return Me.tableQ1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsFlash = CType(MyBase.Clone,dsFlash)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Q1")) Is Nothing) Then
            Me.Tables.Add(New Q1DataTable(ds.Tables("Q1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableQ1 = CType(Me.Tables("Q1"),Q1DataTable)
        If (Not (Me.tableQ1) Is Nothing) Then
            Me.tableQ1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsFlash"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsFlash.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableQ1 = New Q1DataTable
        Me.Tables.Add(Me.tableQ1)
    End Sub
    
    Private Function ShouldSerializeQ1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Q1RowChangeEventHandler(ByVal sender As Object, ByVal e As Q1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Q1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfldQID As DataColumn
        
        Private columnfldImageURL As DataColumn
        
        Private columnfldQuestion As DataColumn
        
        Private columnfldType As DataColumn
        
        Private columnfldAnswer As DataColumn
        
        Friend Sub New()
            MyBase.New("Q1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fldQIDColumn As DataColumn
            Get
                Return Me.columnfldQID
            End Get
        End Property
        
        Friend ReadOnly Property fldImageURLColumn As DataColumn
            Get
                Return Me.columnfldImageURL
            End Get
        End Property
        
        Friend ReadOnly Property fldQuestionColumn As DataColumn
            Get
                Return Me.columnfldQuestion
            End Get
        End Property
        
        Friend ReadOnly Property fldTypeColumn As DataColumn
            Get
                Return Me.columnfldType
            End Get
        End Property
        
        Friend ReadOnly Property fldAnswerColumn As DataColumn
            Get
                Return Me.columnfldAnswer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Q1Row
            Get
                Return CType(Me.Rows(index),Q1Row)
            End Get
        End Property
        
        Public Event Q1RowChanged As Q1RowChangeEventHandler
        
        Public Event Q1RowChanging As Q1RowChangeEventHandler
        
        Public Event Q1RowDeleted As Q1RowChangeEventHandler
        
        Public Event Q1RowDeleting As Q1RowChangeEventHandler
        
        Public Overloads Sub AddQ1Row(ByVal row As Q1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQ1Row(ByVal fldQID As Short, ByVal fldImageURL As String, ByVal fldQuestion As String, ByVal fldType As String, ByVal fldAnswer As String) As Q1Row
            Dim rowQ1Row As Q1Row = CType(Me.NewRow,Q1Row)
            rowQ1Row.ItemArray = New Object() {fldQID, fldImageURL, fldQuestion, fldType, fldAnswer}
            Me.Rows.Add(rowQ1Row)
            Return rowQ1Row
        End Function
        
        Public Function FindByfldQID(ByVal fldQID As Short) As Q1Row
            Return CType(Me.Rows.Find(New Object() {fldQID}),Q1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Q1DataTable = CType(MyBase.Clone,Q1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Q1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfldQID = Me.Columns("fldQID")
            Me.columnfldImageURL = Me.Columns("fldImageURL")
            Me.columnfldQuestion = Me.Columns("fldQuestion")
            Me.columnfldType = Me.Columns("fldType")
            Me.columnfldAnswer = Me.Columns("fldAnswer")
        End Sub
        
        Private Sub InitClass()
            Me.columnfldQID = New DataColumn("fldQID", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldQID)
            Me.columnfldImageURL = New DataColumn("fldImageURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldImageURL)
            Me.columnfldQuestion = New DataColumn("fldQuestion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldQuestion)
            Me.columnfldType = New DataColumn("fldType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldType)
            Me.columnfldAnswer = New DataColumn("fldAnswer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldAnswer)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnfldQID}, true))
            Me.columnfldQID.AllowDBNull = false
            Me.columnfldQID.Unique = true
        End Sub
        
        Public Function NewQ1Row() As Q1Row
            Return CType(Me.NewRow,Q1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Q1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Q1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Q1RowChangedEvent) Is Nothing) Then
                RaiseEvent Q1RowChanged(Me, New Q1RowChangeEvent(CType(e.Row,Q1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Q1RowChangingEvent) Is Nothing) Then
                RaiseEvent Q1RowChanging(Me, New Q1RowChangeEvent(CType(e.Row,Q1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Q1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Q1RowDeleted(Me, New Q1RowChangeEvent(CType(e.Row,Q1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Q1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Q1RowDeleting(Me, New Q1RowChangeEvent(CType(e.Row,Q1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQ1Row(ByVal row As Q1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Q1Row
        Inherits DataRow
        
        Private tableQ1 As Q1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQ1 = CType(Me.Table,Q1DataTable)
        End Sub
        
        Public Property fldQID As Short
            Get
                Return CType(Me(Me.tableQ1.fldQIDColumn),Short)
            End Get
            Set
                Me(Me.tableQ1.fldQIDColumn) = value
            End Set
        End Property
        
        Public Property fldImageURL As String
            Get
                Try 
                    Return CType(Me(Me.tableQ1.fldImageURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQ1.fldImageURLColumn) = value
            End Set
        End Property
        
        Public Property fldQuestion As String
            Get
                Try 
                    Return CType(Me(Me.tableQ1.fldQuestionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQ1.fldQuestionColumn) = value
            End Set
        End Property
        
        Public Property fldType As String
            Get
                Try 
                    Return CType(Me(Me.tableQ1.fldTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQ1.fldTypeColumn) = value
            End Set
        End Property
        
        Public Property fldAnswer As String
            Get
                Try 
                    Return CType(Me(Me.tableQ1.fldAnswerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQ1.fldAnswerColumn) = value
            End Set
        End Property
        
        Public Function IsfldImageURLNull() As Boolean
            Return Me.IsNull(Me.tableQ1.fldImageURLColumn)
        End Function
        
        Public Sub SetfldImageURLNull()
            Me(Me.tableQ1.fldImageURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldQuestionNull() As Boolean
            Return Me.IsNull(Me.tableQ1.fldQuestionColumn)
        End Function
        
        Public Sub SetfldQuestionNull()
            Me(Me.tableQ1.fldQuestionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldTypeNull() As Boolean
            Return Me.IsNull(Me.tableQ1.fldTypeColumn)
        End Function
        
        Public Sub SetfldTypeNull()
            Me(Me.tableQ1.fldTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldAnswerNull() As Boolean
            Return Me.IsNull(Me.tableQ1.fldAnswerColumn)
        End Function
        
        Public Sub SetfldAnswerNull()
            Me(Me.tableQ1.fldAnswerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Q1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Q1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Q1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Q1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
